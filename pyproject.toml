[tool.poetry]
name = "secure_context"
readme = "README.md"
version = "2.0.0"
license = "BSD-3-Clause"
packages = [
  { include = 'secure_context/**/*.py' },
  { include = "secure_context/**/*.pyi" },
  { include = "secure_context/py.typed" },
  { include = "secure_context/ffdhe4096" },
]
include = [
  { path = "secure_context/_extensions/*.c", format = "sdist" },
  { path = "secure_context/_extensions/*.so", format = "wheel" },
  { path = "secure_context/_extensions/*.pyd", format = "wheel" },
]
authors = ["VÃ­tor Vasconcellos <vasconcellos.dev@gmail.com>"]
keywords = ["rsa", "x509", "openssl", "security", "certificate"]
repository = "https://gitlab.com/VitorVasconcellos/secure_context"
description = "Utilities for creation of SSL/TLS security contexts for servers and clients"
classifiers = [
  "Topic :: Security",
  "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
  "Topic :: Software Development :: Libraries",
  "Operating System :: OS Independent",
  "Intended Audience :: Developers",
  "Development Status :: 5 - Production/Stable",
]

[tool.poetry.urls]
"Bug Tracker" = "https://gitlab.com/VitorVasconcellos/secure_context/issues"

[tool.poetry.build]
script = "build.py"
generate-setup-file = false

[tool.poetry.dependencies]
python = "^3.6"
importlib_metadata = { version = "*", python = "<=3.8" }
importlib_resources = { version = "*", python = "<=3.9" }

[tool.poetry.dev-dependencies]
mypy = "*"
black = "*"
isort = "*"
poethepoet = "*"

[tool.poe.tasks]
clean = { shell = 'rm -rf *.whl dist build include; rm -rf secure_context/**/*.so' }
test = [
  { cmd = 'openssl req -newkey rsa:2048 -sha256 -nodes -keyout cert.key -x509 -days 365 -out cert.pem -subj "/C=US/ST=New York/L=Brooklyn/O=Example Brooklyn Company/CN=YOURDOMAIN.EXAMPLE"' },
  { shell = 'time python -m unittest discover -s tests' },
  { cmd = 'rm cert.key cert.pem' },
]
mypy = { shell = 'mypy --python-executable "$(which python)" .' }
check = ['mypy', 'pyright']
format = { shell = "isort . && black -q . && npx prettier --write --log-level=warn **/*.{md,json} && npx clang-format -i secure_context/_extensions/*.c" }
pyright = 'npx pyright'
update-editor-config = "curl -LO 'https://raw.githubusercontent.com/jokeyrhyme/standard-editorconfig/main/.editorconfig'"

[tool.poe.executor]
type = "auto"

[tool.mypy]
pretty = true
strict = true
color_output = true
error_summary = true
ignore_errors = false
python_version = "3.6"
follow_imports = "normal"
strict_optional = true
show_error_codes = true
warn_unreachable = true
python_executable = "./.venv/bin/python"
show_error_context = true
show_column_numbers = true
warn_unused_configs = true
warn_unused_ignores = false              # for compatibility with pyright
warn_incomplete_stub = true
disallow_any_unimported = true

[tool.isort]
quiet = true
atomic = true
profile = "black"
src_paths = ["secure_context", "tests"]
line_length = 99
length_sort = true
virtual_env = ".venv"
combine_star = true
order_by_type = true
dedup_headings = true
skip_gitignore = true
balanced_wrapping = true
combine_as_imports = true
import_heading_stdlib = "Internal"
remove_redundant_aliases = true
import_heading_thirdparty = "External"
import_heading_firstparty = "External"
import_heading_localfolder = "Project"

[tool.black]
color = true
line-length = 99
target-version = ['py36']

[tool.pyright]
venv = ".venv"
include = ["secure_context", "tests"]
venvPath = "."
pythonVersion = "3.6"
pythonPlatform = "All"
typeCheckingMode = "strict"
reportImportCycles = "none"
reportUnknownMemberType = "none"
reportUnknownVariableType = "none"
reportUnknownArgumentType = "none"

[build-system]
requires = ["poetry-core>=1.0.0", "setuptools", "wheel"]
build-backend = "poetry.core.masonry.api"
